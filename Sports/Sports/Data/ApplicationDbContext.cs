using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Sports.Models;

namespace Sports.Data
{
    public class ApplicationDbContext : IdentityDbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }
        public DbSet<Sports.Models.Sport> Sport { get; set; } = default!;
        public DbSet<Sports.Models.Competition> Competition { get; set; } = default!;
        public DbSet<Sports.Models.Team> Team { get; set; } = default!;
        public DbSet<Sports.Models.Statistic> Statistic { get; set; } = default!;
        public DbSet<Sports.Models.Statistic_Type> Statistic_Type { get; set; } = default!;
        public DbSet<Sports.Models.Result> Result { get; set; } = default!;

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // Ensure CompetitionId is configured as an identity column
            modelBuilder.Entity<Competition>()
                .Property(c => c.Id)
                .ValueGeneratedOnAdd();  // This ensures that the ID is auto-generated by the database

            // Existing configurations for Team-Sport and Team-Competition relationships
            modelBuilder.Entity<Team>()
                .HasOne(t => t.Sport)
                .WithMany(s => s.Teams)
                .HasForeignKey(t => t.SportId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<Team>()
                .HasOne(t => t.Competition)
                .WithMany(c => c.Teams)
                .HasForeignKey(t => t.CompetitionId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<Competition>()
                .HasOne(c => c.Sport)
                .WithMany(s => s.Competitions)
                .HasForeignKey(c => c.SportId)
                .OnDelete(DeleteBehavior.Restrict);

            // New configurations for Result-Team relationships
            modelBuilder.Entity<Result>()
                .HasOne(r => r.Team1)
                .WithMany(t => t.Results1)
                .HasForeignKey(r => r.Team1Id)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<Result>()
                .HasOne(r => r.Team2)
                .WithMany(t => t.Results2)
                .HasForeignKey(r => r.Team2Id)
                .OnDelete(DeleteBehavior.Restrict);
        }
    }
}
